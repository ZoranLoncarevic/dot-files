#!/usr/bin/python3

# Taken from https://github.com/spignelon/cambridge-dictionary

import requests
from bs4 import BeautifulSoup
import sys
import sqlite3
import os

GREY="\u001b[38;5;245m"
BLUE='\033[94m'
NORMAL='\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

QUOTE=1
ITEM=0

right_margin=80
use_color = sys.stdout.isatty()

database_path = "~/.mydictionaries/webster-database.db"
database_path = os.path.expanduser(database_path)
if not os.path.isfile(database_path):
    exists = False
    os.system("mkdir -p "+os.path.dirname(database_path))
else:
    exists = True

conn = sqlite3.connect(database_path)
c = conn.cursor()

if exists == False:
    c.execute('''CREATE TABLE dictionary(word TEXT, meaning TEXT)''')

headers = {
    "Accept-Encoding": "gzip, deflate, br",
    "Upgrade-Insecure-Requests": "1",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
    "Sec-Gpc": "1",
    "Accept-Language": "en-US,en;q=0.6",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-User": "?1",
    "Sec-Fetch-Dest": "document",
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    "Sec-Fetch-Mode": "navigate"
}

def print_out(meaning, use_color):
    if not use_color:
        meaning=meaning.replace(GREY, "")
        meaning=meaning.replace(NORMAL, "")
        meaning=meaning.replace(BOLD, "")
        meaning=meaning.replace(UNDERLINE, "")
    if meaning[0]=="\n":
        meaning=meaning[1:]
    print(meaning)

def print_paragraph(left_margin, text, quote):
    paragraph=""
    # text=text.replace("\n","\n"+" "*left_margin)
    while len(text)>right_margin:
        i=right_margin
        while i>0 and not text[i]==" ":
            i-=1
        paragraph+=text[:i]+"\n"
        text=" "*left_margin+text[i+1:]
    paragraph+=text
    if quote:
        paragraph=GREY+paragraph+NORMAL
    return(paragraph)

def getclass(tag):
    classes=tag.get("class")
    if not classes == None:
        return(" ".join(classes))
    else:
        return("")

def query_function(tag):
    return (((tag.name == "h1" or tag.name == "p") and getclass(tag) == "hword") or
            (tag.name == "p" and getclass(tag).startswith("vd")) or
            (tag.name == "span" and getclass(tag) == "dtText") or
            (tag.name == "div" and getclass(tag) == "vg-sseq-entry-item-label") or
            (tag.name == "span" and getclass(tag) == "letter") or
            (tag.name == "span" and getclass(tag) == "sl") or
            (tag.name == "span" and getclass(tag) == "sd") or
            (tag.name == "span" and getclass(tag) == "drp") or
            (tag.name == "span" and getclass(tag).startswith("ex-sent")) or
            (tag.name == "h2"))

word = ' '.join([str(elem) for elem in sys.argv[1:]])
c.execute('''SELECT * FROM dictionary WHERE word  = ?''', (word,))
entry = c.fetchone()

def cambridge(word):
    url = "https://www.merriam-webster.com/dictionary/" + word
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")
    text = soup.findAll(query_function)
    num = 0
    meaning_ = ""
    entry_number = ""
    entry_letter = ""
    entry_special = ""
    entry_drp = ""
    no_double_newline = 1
    for item in text:
        if ((item.name == "h1" or item.name == "p") and getclass(item) == "hword"):
            meaning_ += "\n" + UNDERLINE + BOLD + item.get_text() + NORMAL
        elif item.name == "h2" and getclass(item) == "parts-of-speech":
            meaning_ += " (" + item.get_text()+")\n"
            no_double_newline = 0
        elif item.name == "h2" and item.get_text() == "Kids Definition":
            break
        elif item.name == "p" and getclass(item).startswith("vd"):
            meaning_ += "\n" + item.get_text() + ":\n\n"
            no_double_newline = 1
        elif item.name == "span" and getclass(item) == "dtText":
            if not no_double_newline:
                meaning_ += "\n"
            if entry_number:
                meaning_ += entry_number + " "
            else:
                meaning_ += "  "
            if entry_letter:
                meaning_ += entry_letter + " "
            else:
                meaning_ += "  "
            if entry_drp:
                meaning_ += entry_drp + " "
            if entry_special:
                meaning_ += "[" + entry_special + "] "
            meaning_ += print_paragraph(5, item.get_text(), ITEM) + "\n\n"
            entry_number = ""
            entry_letter = ""
            entry_special = ""
            entry_drp = ""
            no_double_newline = 1
        elif item.name == "div" and getclass(item) == "vg-sseq-entry-item-label":
            entry_number = item.get_text()
        elif item.name == "span" and getclass(item) == "letter":
            entry_letter = item.get_text()
        elif item.name == "span" and (getclass(item) == "sl" or getclass(item) == "sd"):
            entry_special = item.get_text()
        elif item.name == "span" and getclass(item) == "drp":
            entry_drp = item.get_text()
        elif item.name == "span" and getclass(item).startswith("ex-sent"):
            meaning_ += " "*6 + print_paragraph(6, item.get_text().strip(), QUOTE) + "\n"
            no_double_newline = 0
        elif item.name == "div" and getclass(item) == "lbb lb-cm lpt-10":
            test=item.contents
            actual = ""
            for test_item in test:
                if test_item.name == "span" and getclass(test_item) == "deg":
                    actual+=' '.join(test_item.get_text().lstrip(" ").rstrip(": ").split())
                elif test_item.name == "a" and getclass(test_item) == "hdib tb lmb-10":
                    actual+=BOLD+test_item.get_text()+NORMAL+": "
                elif test_item.name == "div" and getclass(test_item) == "dexamp":
                    actual+=test_item.get_text()
            meaning_ = meaning_ + print_paragraph(0, "\n"+actual+"\n",ITEM)

    print_out(meaning_, sys.stdout.isatty()) 
    # c.execute('''INSERT INTO dictionary VALUES(?,?)''', (word, meaning_))

def indb(word):
    if entry:
        print(f"Meaning of {entry[0]} in English: ")
        print_out(entry[1], sys.stdout.isatty())
    else:
        cambridge(word)

try:
    indb(word)
except:
    print("Something went wrong!")
    print("Possibly the word you entered is not in the dictionary or there's a connection issue")

conn.commit()
conn.close()
